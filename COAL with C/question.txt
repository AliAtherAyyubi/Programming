
C code:

int max_switch(int a, int b, int c, int n)
{

    int max;
    if (a > b && a >= c)
        max = a;
    else if (b >= a && b >= c)
        max = b;
    else
        max = c;
    switch (n)
    {
    case 0:
    case 1:
        max = max + 1;
        break;
    case 2:
        max = max + 2;
        break;
    case 3:
        max = max + 3;
        break;
    default:
        max = max + max;
    }

    return max;
}

_max_switch:

pusl %esi 
pusl %ebx

movl 12(%esp),%edx
movl 16(%esp),%ebx
movl 10(%esp),%eax
movl 24(%esp),%ecx

cmpl %eax, %ebx
movl %eax, %esi

cmovge %ebx,%esi
cmpl %esi, %edx
jge .L2

cmpl %eax, %edx
cmovl %eax, %edx

cmpl %edx, %ebx
cmovge %ebx, %eax

movl %eax, %ebx

L2:

leal 2(%edx), %eax
cmpl $2, %ecs
je L1
jg l$
leal 1(%edx), %eax
testl %ecx, %ecx
js L5

L1:
popl %ebxpopl %esi 
ret 

L4:

leal 3(%edx),%eax

_max_switch:
    pushl %esi  # Save registers
    pushl %ebx

    movl 12(%esp), %edx  # Load a into edx
    movl 16(%esp), %ebx  # Load b into ebx
    movl 10(%esp), %eax  # Load c into eax
    movl 24(%esp), %ecx  # Load n into ecx

    cmpl %eax, %ebx  # Compare a and b
    movl %eax, %esi  # Move a into esi (max)

    cmovge %ebx, %esi  # If b >= a, move b into esi (max)
    cmpl %esi, %edx  # Compare max and c
    jge .L2  # If max >= c, jump to L2

    cmpl %eax, %edx  # Compare a and c
    cmovl %eax, %edx  # If a < c, move a into edx

    cmpl %edx, %ebx  # Compare c and b
    cmovge %ebx, %eax  # If b >= c, move b into eax (max)

    movl %eax, %ebx  # Move max into ebx

.L2:
    # switch (n) {
    leal 2(%edx), %eax  # case 2: max = max + 2
    cmpl $2, %ecx  # Compare n and 2
    je .L1  # If n == 2, jump to L1

    jg .L4  # If n > 2, jump to L4

    leal 1(%edx), %eax  # case 0 or 1: max = max + 1
    testl %ecx, %ecx  # Test n
    js .L5  # If n < 0, jump to L5

.L1:
    popl %ebx
    popl %esi
    ret

.L4:
    leal 3(%edx), %eax  # case 3: max = max + 3

.L5:
    addl %eax, %eax  # default: max = max + max
    movl %eax, %ebx
    jmp .L1